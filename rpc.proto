syntax = "proto3";

// Proto field names should be snake_case, but some plugins don't convert to 
// camel like they should, so we use camelCase here.

package service;
option go_package=".;service";

import "patch/go.proto";

service RPC {      
  // BEGIN NO AUTH  
  rpc AuthStatus(AuthStatusRequest) returns (AuthStatusResponse) {}
  rpc AuthUnlock(AuthUnlockRequest) returns (AuthUnlockResponse) {} 
  rpc AuthLock(AuthLockRequest) returns (AuthLockResponse) {}   
  rpc Rand(RandRequest) returns (RandResponse) {}
  rpc RandPassword(RandPasswordRequest) returns (RandPasswordResponse) {}
  // END NO AUTH  

  rpc AccountRegister(AccountRegisterRequest) returns (AccountRegisterResponse) {}   
  rpc AccountCreate(AccountCreateRequest) returns (AccountCreateResponse) {}   
  rpc AccountStatus(AccountStatusRequest) returns (AccountStatusResponse) {}
  rpc AccountInvite(AccountInviteRequest) returns (AccountInviteResponse) {}
  rpc AccountInviteAccept(AccountInviteAcceptRequest) returns (AccountInviteAcceptResponse) {}  
  rpc AccountSetUsername(AccountSetUsernameRequest) returns (AccountSetUsernameResponse) {}
  rpc TeamCreate(TeamCreateRequest) returns (TeamCreateResponse) {}

  // Channels
  rpc Channels(ChannelsRequest) returns (ChannelsResponse) {}
  rpc ChannelCreate(ChannelCreateRequest) returns (ChannelCreateResponse) {}  
  rpc ChannelLeave(ChannelLeaveRequest) returns (ChannelLeaveResponse) {}
  rpc ChannelRead(ChannelReadRequest) returns (ChannelReadResponse) {}
  rpc ChannelUsers(ChannelUsersRequest) returns (ChannelUsersResponse) {}
  rpc ChannelUsersAdd(ChannelUsersAddRequest) returns (ChannelUsersAddResponse) {}
  rpc ChannelUsersRemove(ChannelUsersRemoveRequest) returns (ChannelUsersRemoveResponse) {}
  
  // Messages
  rpc MessagePrepare(MessagePrepareRequest) returns (MessagePrepareResponse) {}
  rpc MessageSend(MessageSendRequest) returns (MessageSendResponse) {}
  rpc Messages(MessagesRequest) returns (MessagesResponse) {}

  // Relay
  rpc Relay(RelayRequest) returns (stream RelayOutput) {}

  // DB
  rpc Collections(CollectionsRequest) returns (CollectionsResponse) {}
  rpc Documents(DocumentsRequest) returns (DocumentsResponse) {}  
}

message AccountRegisterRequest {
  string email = 1;
}
message AccountRegisterResponse {}

message AccountCreateRequest {
  string email = 1;
  string code = 2;
  
  // AccountKey is optional (generated if not specified).
  string accountKey = 10;
  // ClientKey is optional (generated if not specified).
  string clientKey = 11;
  
}
message AccountCreateResponse {}

message AccountInviteRequest {
  string email = 1;
}
message AccountInviteResponse {
  string inviteCode = 1;
}

message AccountInviteAcceptRequest {
  string code = 1;
}
message AccountInviteAcceptResponse {}

message AccountSetUsernameRequest {
  string username = 1;
}
message AccountSetUsernameResponse {}

message TeamCreateRequest {
  string teamKey = 1;
}
message TeamCreateResponse {}

enum AuthType {
  option (go.enum) = {name: "AuthType"};
  
  UNKNOWN_AUTH = 0 [(go.value) = {name: "UnknownAuth"}];
  // PasswordAuth uses password with salt (argon2id).
  PASSWORD_AUTH = 10 [(go.value) = {name: "PasswordAuth"}];
  // PaperKeyAuth uses a BIP39 phrase representing a key.
  PAPER_KEY_AUTH = 11 [(go.value) = {name: "PaperKeyAuth"}];
  // FIDO2HMACSecretAuth uses a FIDO2 HMAC-Secret extension.
  FIDO2_HMAC_SECRET_AUTH = 20 [(go.value) = {name: "FIDO2HMACSecretAuth"}];
}

enum AuthStatus {
  option (go.enum) = {name: "AuthStatus"};
  AUTH_UNKNOWN = 0 [(go.value) = {name: "AuthUnknown"}];
  AUTH_SETUP_NEEDED = 1 [(go.value) = {name: "AuthSetupNeeded"}];  
  AUTH_UNLOCKED = 2 [(go.value) = {name: "AuthUnlocked"}];  
  AUTH_LOCKED = 3 [(go.value) = {name: "AuthLocked"}];  
}

message AuthStatusRequest {}
message AuthStatusResponse {
  AuthStatus status = 1;
}

message AuthUnlockRequest {
  // Secret for auth depending on auth type, e.g. password, pin, etc.
  string secret = 1;
  // Type for auth.
  AuthType type = 2;
  // Client name.
  string client = 6;
}
message AuthUnlockResponse {
  // AuthToken to use for requests.
  string authToken = 1;
}

message AuthLockRequest {}
message AuthLockResponse {}

enum AccountStatus {
  option (go.enum) = {name: "AccountStatus"};

  ACCOUNT_UNKNOWN = 0 [(go.value) = {name: "AccountUnknown"}];
  ACCOUNT_CREATE = 1 [(go.value) = {name: "AccountStatusCreate"}];    
  ACCOUNT_INVITE_CODE = 2 [(go.value) = {name: "AccountStatusInviteCode"}];  
  ACCOUNT_USERNAME = 3 [(go.value) = {name: "AccountStatusUsername"}];  
  ACCOUNT_COMPLETE = 4 [(go.value) = {name: "AccountStatusComplete"}];  
}

message AccountStatusRequest {}
message AccountStatusResponse {
  AccountStatus status = 1;
}

message Account {
  string kid = 1 [(go.field) = {name: "KID"}];
  string email = 2;
  bool verified = 3;
}

message Team {
  string id = 1 [(go.field) = {name: "ID"}];
  string domain = 2;
}

enum Encoding {
  option (go.enum) = {name: "Encoding"};

  HEX = 0  [(go.value) = {name: "Hex"}];
  BASE62 = 1 [(go.value) = {name: "Base62"}];    
  BASE58 = 2 [(go.value) = {name: "Base58"}];    
  BASE32 = 3 [(go.value) = {name: "Base32"}];    
  BASE16 = 4 [(go.value) = {name: "Base16"}];    
  BASE64 = 5 [(go.value) = {name: "Base64"}];    
  SALTPACK = 6 [(go.value) = {name: "Saltpack"}];    
  BIP39 = 7 [(go.value) = {name: "BIP39"}];    
}

message RandRequest {
  int32 numBytes = 1;
  Encoding encoding = 2;
  bool noPadding = 10;
  bool lowercase = 11;
}
message RandResponse {
  string data = 1;
}

message RandPasswordRequest {
  int32 length = 1;
}
message RandPasswordResponse {
  string password = 1;
}

enum MessageStatus {
  option (go.enum) = {name: "MessageStatus"};

  MESSAGE_SENT = 0 [(go.value) = {name: "MessageSent"}];
  MESSAGE_PENDING = 1 [(go.value) = {name: "MessagePending"}];
  MESSAGE_ERROR = 2 [(go.value) = {name: "MessageError"}];
}

message Message {
  string id = 1 [(go.field) = {name: "ID"}];
  string sender = 2;  
  repeated string text = 10;
  
  MessageStatus status = 20;
  
  int64 createdAt = 31;
}

message MessagePrepareRequest {  
  string channel = 1;
  string text = 11;
}

message MessagePrepareResponse {
  Message message = 1;
}

message MessageSendRequest {  
  string channel = 1;
  // ID is optional, if message was prepared you can use that ID, otherwise it 
  // is autogenerated.
  string id = 10 [(go.field) = {name: "ID"}];
  string text = 11;
}

message MessageSendResponse {
  Message message = 1;
}

message MessagesRequest {  
  string channel = 1;
  
  // Update, if true will update from the server.
  bool update = 5;  
}

message MessagesResponse {
  repeated Message messages = 1;
}

enum ChannelType {
  option (go.enum) = {name: "ChannelType"};

  CHANNEL_UNKNOWN = 0 [(go.value) = {name: "UnknownChannelType"}];
  CHANNEL_TEAM = 1 [(go.value) = {name: "TeamChannelType"}];
  CHANNEL_USERS = 2 [(go.value) = {name: "UsersChannelType"}];
}

message Channel {
  string id = 1 [(go.field) = {name: "ID"}];
  string name = 2;
  ChannelType type = 3;

  string snippet = 10;
  int64 updatedAt = 11;
  int64 index = 20;
}

message ChannelsRequest {
  bool update = 1;
}
message ChannelsResponse {
  repeated Channel channels = 1;
}

message ChannelUser {
  string id = 1 [(go.field) = {name: "ID"}];
  string name = 2;
}

message ChannelUsersRequest {
  string channel = 1;
}
message ChannelUsersResponse {
  repeated ChannelUser users = 1;
}

message ChannelUsersAddRequest {
  string channel = 1;
  repeated string users = 2;
}
message ChannelUsersAddResponse {}

message ChannelUsersRemoveRequest {
  string channel = 1;
  repeated string users = 2;
}
message ChannelUsersRemoveResponse {}

message ChannelCreateRequest {
  string name = 1;
  string description = 2;
  
  bool private = 10;
}
message ChannelCreateResponse {
  string id = 1 [(go.field) = {name: "ID"}];
}

message ChannelLeaveRequest {
  string channel = 1;
}
message ChannelLeaveResponse {}

message ChannelReadRequest {
  string channel = 1;
  int64 index = 2;
}
message ChannelReadResponse {}

message ChannelInviteRequest {
  string channel = 1;
  repeated string recipients = 2;  
}
message ChannelInviteResponse {
  Message message = 1;
}

message RelayRequest {}

message RelayOutput {  
  message Channel {
    string id = 1 [(go.field) = {name: "ID"}];
    int64 index = 2;
  }

  string type = 1;
  Channel channel = 2;
}

message Collection {
  string path = 1;
}

message CollectionsRequest {
  string parent = 1;

  // DB is "service" or "vault".
  string db = 5 [(go.field) = {name: "DB"}];
}
message CollectionsResponse {
  repeated Collection collections = 1;
}

message Document {
  string path = 1;
  string value = 2;

  int64 createdAt = 10;
  int64 updatedAt = 11;
}

message DocumentsRequest {
  string path = 1;

  // DB is "service" or "vault".
  string db = 5 [(go.field) = {name: "DB"}];  
}
message DocumentsResponse {
  repeated Document documents = 1;
}

